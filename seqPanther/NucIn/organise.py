#!/usr/bin/env python

import click
import pandas as pd
from os import path, makedirs


def alt_nuc(info_dict):
    refnuc = info_dict["Reference Nucleotide"]
    to_keep = []
    for alt_nuc_pt in info_dict["Nucleotide Percent"].split(","):
        if alt_nuc_pt.split(":")[0] != refnuc:
            to_keep.append(refnuc + ":" + alt_nuc_pt)
    return ",".join(to_keep)


def selected_nuc(nuc_pts, cutoff):
    selected = []
    for nuc_pt in nuc_pts:
        npts = nuc_pt.split(",")
        npts = ",".join([n for n in npts if float(n.split(":")[1]) > cutoff])
        npts = npts if npts else None
        selected.append(npts)
    return selected


@click.command(context_settings={"help_option_names": ["-h", "--help"]},
               no_args_is_help=True)
@click.option(
    "-s",
    "--sub",
    "sub",
    help="Substitution table generated by codoncounter",
    type=str,
    default=None,
    show_default=True,
)
@click.option(
    "-i",
    "--indel",
    "indel",
    help="Indel table generated by codoncounter",
    type=str,
    default=None,
    show_default=True,
)
@click.option(
    "-a",
    "--min_alt",
    "min_alt",
    help="Minimum alternative nucleotide %",
    type=float,
    default=5,
    show_default=True,
)
@click.option(
    "-o",
    "--out_folder",
    "outfolder",
    help="Output folder",
    type=str,
    default=".",
    show_default=True,
)
def run(sub, indel, min_alt, outfolder):
    "Please input csv files generated by codoncounter"
    try:
        makedirs(outfolder, exist_ok=True)
    except Exception as e:
        print(e)
        exit()
    if not sub and not indel:
        exit("No input file given. Exiting")

    changed_table = []
    if sub:
        if path.isfile(sub):
            try:
                sub = pd.read_csv(
                    sub,
                    usecols=[
                        "Sample",
                        "coor",
                        "read_count",
                        "Reference Nucleotide",
                        "Nucleotide Percent",
                    ],
                )
                sub["Nucleotide Percent"] = selected_nuc(
                    sub["Nucleotide Percent"].values, min_alt)
                sub = sub[~pd.isna(sub['Nucleotide Percent'])]
                sub["sub"] = sub.apply(alt_nuc, axis=1)
                del sub["Nucleotide Percent"]
                # Split rows
                sub = sub[sub["sub"].apply(lambda x: x.strip() != "")]
                sub["sub"] = sub["sub"].apply(lambda x: x.split(","))
                sub = sub.explode("sub")
                sub["pt"] = sub["sub"].apply(lambda x: float(x.split(":")[-1]))
                sub = sub.sort_values(["coor", "pt"], ascending=[True, False])
                del sub["pt"]

                sub["type"] = "sub"
                changed_table.append(sub[["Sample", "coor", "type", "sub"]])
            except Exception as e:
                print(e)

        else:
            exit(f"Given {sub} is not file")
    if indel:
        if path.isfile(indel):
            try:
                indel = pd.read_csv(
                    indel,
                    usecols=[
                        "Sample",
                        "coor",
                        "Nucleotide Frequency",
                        "Nucleotide Percent",
                    ],
                )

                indel = indel[indel["Nucleotide Percent"] >= min_alt]
                indel["type"] = indel["Nucleotide Frequency"].apply(
                    lambda x: x[:3])
                indel["Nucleotide Frequency"] = indel[
                    "Nucleotide Frequency"].apply(lambda x: x[3:])
                indel["sub"] = "-"
                indel.loc[indel["type"] == "del", "sub"] = indel.loc[
                    indel["type"] == "del"].apply(
                        lambda x: x["Nucleotide Frequency"].split(":")[0] + ":"
                        + "-" * len(x["Nucleotide Frequency"].split(":")[0]
                                    ) + ":" + str(x["Nucleotide Percent"]),
                        axis=1,
                    )  # Add more values here

                indel.loc[indel["type"] == "ins", "sub"] = indel.loc[
                    indel["type"] == "ins"].apply(
                        lambda x: "-" + ":" + x["Nucleotide Frequency"].split(
                            ":")[0] + ":" + str(x["Nucleotide Percent"]),
                        axis=1,
                    )
                indel["sub"] = indel["sub"].apply(lambda x: x.split(","))
                indel = indel.explode("sub")
                indel["pt"] = indel["sub"].apply(
                    lambda x: float(x.split(":")[-1]))
                indel = indel.sort_values(["coor", "pt"],
                                          ascending=[True, False])
                del indel["pt"]

                changed_table.append(indel[["Sample", "coor", "type", "sub"]])
            except Exception as e:
                print(e)
        else:
            exit(f"Given {indel} is not file")
    if not changed_table:
        exit("No data detected in input files.")
    changed_table = pd.concat(changed_table)  # TODO: Request for coodrinates
    changed_table = changed_table.sort_values("coor", ascending=True)
    changed_table = changed_table[changed_table["sub"].apply(len) > 0]
    # changed_table = changed_table.groupby("Sample")["sub"].apply(
    # lambda x: ','.join(list(x)))
    for samp in changed_table["Sample"].unique():
        print(f"Generating {outfolder}/{samp}.tsv")
        changed_table[changed_table["Sample"] == samp].to_csv(
            f"{outfolder}/{samp}.tsv", index=False, sep="\t")
    print(
        f"Output file genrated at {outfolder}, please remove not required changes from the files"
    )


if __name__ == "__main__":
    run()
    # run("../CodonCounter/sub_output.csv", "../CodonCounter/indel_output.csv",
    # None, "../CodonCounter/test_data/NC_045512.2.fasta", "xxx")
